apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      env: {{ .Values.env }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        appVersion: {{ .Chart.AppVersion }}
        helmVersion: {{ .Chart.Version }}
        env: {{ .Values.env }}
    spec:
      {{- if .Values.database.sqlProxyEnabled }}
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-proxy-credentials
            defaultMode: 0444
            items:
            - key: "credentials.json"
              path: "credentials.json"
      {{- end }}
      containers:
        {{- if .Values.database.sqlProxyEnabled }}
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.16
          command: ["/cloud_sql_proxy",
                    "-instances=$(SQL_INSTANCE_NAME)=tcp:$(DB_PORT)",
                    "-ip_address_types=PRIVATE",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          securityContext:
            runAsUser: 2  # non-root user
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
          env:
          - name: SQL_INSTANCE_NAME
            valueFrom:
              configMapKeyRef:
                name: cloudsql-proxy-config
                key: instance-connection-name
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                name: db-config
                key: db-port
        {{- end }}
        - name: {{ .Chart.Name }}
          {{- if eq .Values.image.tag "latest"}}
          image: "{{ .Values.image.name }}/{{ .Chart.Name }}:{{ .Chart.AppVersion }}"
          {{- else}}
          image: "{{ .Values.image.name }}/{{ .Chart.Name }}:{{ .Values.image.tag }}"
          {{- end}}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http-server
              containerPort: {{ .Values.container.port }}
          readinessProbe:
            httpGet:
              path: /info
              port: {{ .Values.container.port }}
            periodSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /info
              port: {{ .Values.container.port }}
            initialDelaySeconds: 300
            periodSeconds: 20
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
          env:
          - name: DB_HOST
            {{- if .Values.database.managedPostgres }}
            valueFrom:
              secretKeyRef:
                name: db-config
                key: db-host
            {{- else }}
            value: $(POSTGRES_SERVICE_HOST)
            {{- end }}
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                name: db-config
                key: db-port
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: db-config
                key: {{ .Values.database.secrets.nameKey }}
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: db-credentials
                key: {{ .Values.database.secrets.usernameKey }}
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: db-credentials
                key: {{ .Values.database.secrets.passwordKey }}
          - name: SECURITY_USER_NAME
            valueFrom:
              secretKeyRef:
                name: security-credentials
                key: security-user
          - name: SECURITY_USER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: security-credentials
                key: security-password
          - name: RABBITMQ_HOST
            {{- if .Values.managedRabbitMQ.enabled }}
            valueFrom:
              configMapKeyRef:
                name: rabbit-config
                key: rabbit-mq-host
            {{- else }}
            value: "$(RABBITMQ_SERVICE_HOST)"
            {{- end }}
          - name: RABBITMQ_PORT
            {{- if .Values.managedRabbitMQ.enabled }}
            valueFrom:
              configMapKeyRef:
                name: rabbit-config
                key: rabbit-mq-port
            {{- else }}
            value: "$(RABBITMQ_SERVICE_PORT)"
            {{- end }}
          - name: RABBITMQ_USERNAME
            valueFrom:
              secretKeyRef:
                name: rabbitmq
                key: rabbitmq-username
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: rabbitmq
                key: rabbitmq-password
          - name: SERVER_PORT
            value: "{{ .Values.container.port }}"
          - name: SECURITY_BASIC_ENABLED
            value: "true"
          - name: SPRING_DATASOURCE_URL
            {{- if .Values.database.sqlProxyEnabled }}
            value: "jdbc:postgresql://127.0.0.1:5432/$(DB_NAME)"
            {{- else }}
            value: "jdbc:postgresql://$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable"
            {{- end }}
          - name: liquibase_url
            value: "jdbc:postgresql://$(DB_HOST):$(DB_PORT)/$(DB_NAME)"
          - name: REDIS_HOST
            {{- if .Values.database.managedRedis }}
            valueFrom:
              configMapKeyRef:
                name: redis-config
                key: redis-host
            {{- else }}
            value: "$(REDIS_MASTER_SERVICE_HOST)"
            {{- end }}
          - name: REDIS_PORT
            {{- if .Values.database.managedRedis }}
            valueFrom:
              configMapKeyRef:
                name: redis-config
                key: redis-port
            {{- else }}
            value: "$(REDIS_MASTER_SERVICE_PORT)"
            {{- end}}
          - name: DATA_GRID_ADDRESS
            value: "$(REDIS_HOST):$(REDIS_PORT)"
          - name: SFTP_HOST
            {{- if .Values.sftp.test.enabled }}
            value: "$(SFTP_SERVICE_HOST)"
            {{- else }}
            value: {{ .Values.sftp.host }}
            {{- end }}
          - name: SFTP_PORT
            value: "22"
          - name: SFTP_USERNAME
            valueFrom:
              secretKeyRef:
                name: sftp-secret
                key: sftp-sample-user
          - name: SFTP_PASSWORD
            valueFrom:
              secretKeyRef:
                name: sftp-secret
                key: sftp-sample-password
          - name: SFTP_DIRECTORY_BUSINESS
            value: "{{ .Values.sftp.directory.business }}"
          - name: SFTP_DIRECTORY_SOCIAL
            value: "{{ .Values.sftp.directory.social }}"
          - name: SFTP_DIRECTORY_CENSUS
            value: "{{ .Values.sftp.directory.census }}"
          - name: SFTP_DIRECTORY_DOCUMENTS
            value: "{{ .Values.sftp.directory.documents }}"
          - name: SFTP_CRON
            value: "{{ .Values.sftp.cron }}"
          - name: EXPORT_SCHEDULE_CRON_EXPRESSION
            value: "{{ .Values.export.cron }}"
          - name: PARTY_SVC_CONNECTION_CONFIG_HOST
            {{- if .Values.dns.enabled }}
            value: "party.{{ .Values.namespace }}.svc.cluster.local"
            {{- else }}
            value: "$(PARTY_SERVICE_HOST)"
            {{- end }}
          - name: PARTY_SVC_CONNECTION_CONFIG_PORT
            {{- if .Values.dns.enabled }}
            value: "{{ .Values.dns.wellKnownPort }}"
            {{- else }}
            value: "$(PARTY_SERVICE_PORT)"
            {{- end }}
          - name: PARTY_SVC_CONNECTION_CONFIG_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: PARTY_SVC_CONNECTION_CONFIG_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: SAMPLE_UNIT_DISTRIBUTION_DELAY_MILLI_SECONDS
            value: "1000"
          - name: LIQUIBASE_USER
            value: "$(DB_USERNAME)"
          - name: LIQUIBASE_PASSWORD
            value: "$(DB_PASSWORD)"
          - name: SPRING_DATASOURCE_USERNAME
            value: "$(DB_USERNAME)"
          - name: SPRING_DATASOURCE_PASSWORD
            value: "$(DB_PASSWORD)"
          {{- if .Values.zipkin.enabled}}
          - name: SPRING_ZIPKIN_ENABLED
            value: {{ .Values.zipkin.enabled }}
          - name: SPRING_ZIPKIN_BASEURL
            value: "http://$(ZIPKIN_SERVICE_HOST):$(ZIPKIN_SERVICE_PORT)/"
          {{- end}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
