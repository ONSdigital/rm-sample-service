//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference
// Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2020.04.29 at 12:26:07 PM BST
//

package uk.gov.ons.ctp.response.sampleunit.definition;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * Java class for SampleUnit complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="SampleUnit"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="id" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="sampleUnitRef" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="sampleUnitType" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="formType" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="collectionExerciseId" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="sampleAttributes" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="entry" maxOccurs="unbounded" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="key" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *                             &lt;element name="value" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
    name = "SampleUnit",
    propOrder = {
      "id",
      "sampleUnitRef",
      "sampleUnitType",
      "formType",
      "collectionExerciseId",
      "sampleAttributes"
    })
@XmlRootElement(name = "sampleUnit")
public class SampleUnit {

  protected String id;

  @XmlElement(required = true)
  protected String sampleUnitRef;

  @XmlElement(required = true)
  protected String sampleUnitType;

  protected String formType;

  @XmlElement(required = true)
  protected String collectionExerciseId;

  protected SampleUnit.SampleAttributes sampleAttributes;

  /** Default no-arg constructor */
  public SampleUnit() {
    super();
  }

  /** Fully-initialising value constructor */
  public SampleUnit(
      final String id,
      final String sampleUnitRef,
      final String sampleUnitType,
      final String formType,
      final String collectionExerciseId,
      final SampleUnit.SampleAttributes sampleAttributes) {
    this.id = id;
    this.sampleUnitRef = sampleUnitRef;
    this.sampleUnitType = sampleUnitType;
    this.formType = formType;
    this.collectionExerciseId = collectionExerciseId;
    this.sampleAttributes = sampleAttributes;
  }

  public static SampleUnit.Builder<Void> builder() {
    return new SampleUnit.Builder<Void>(null, null, false);
  }

  public static <B> SampleUnit.Builder<B> copyOf(final SampleUnit other) {
    final SampleUnit.Builder<B> newBuilder = new SampleUnit.Builder<B>(null, null, false);
    other.copyTo(newBuilder);
    return newBuilder;
  }

  public static <B> SampleUnit.Builder<B> copyOf(
      final SampleUnit other,
      final PropertyTree propertyTree,
      final PropertyTreeUse propertyTreeUse) {
    final SampleUnit.Builder<B> newBuilder = new SampleUnit.Builder<B>(null, null, false);
    other.copyTo(newBuilder, propertyTree, propertyTreeUse);
    return newBuilder;
  }

  public static SampleUnit.Builder<Void> copyExcept(
      final SampleUnit other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static SampleUnit.Builder<Void> copyOnly(
      final SampleUnit other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  /**
   * Gets the value of the id property.
   *
   * @return possible object is {@link String }
   */
  public String getId() {
    return id;
  }

  /**
   * Sets the value of the id property.
   *
   * @param value allowed object is {@link String }
   */
  public void setId(String value) {
    this.id = value;
  }

  /**
   * Gets the value of the sampleUnitRef property.
   *
   * @return possible object is {@link String }
   */
  public String getSampleUnitRef() {
    return sampleUnitRef;
  }

  /**
   * Sets the value of the sampleUnitRef property.
   *
   * @param value allowed object is {@link String }
   */
  public void setSampleUnitRef(String value) {
    this.sampleUnitRef = value;
  }

  /**
   * Gets the value of the sampleUnitType property.
   *
   * @return possible object is {@link String }
   */
  public String getSampleUnitType() {
    return sampleUnitType;
  }

  /**
   * Sets the value of the sampleUnitType property.
   *
   * @param value allowed object is {@link String }
   */
  public void setSampleUnitType(String value) {
    this.sampleUnitType = value;
  }

  /**
   * Gets the value of the formType property.
   *
   * @return possible object is {@link String }
   */
  public String getFormType() {
    return formType;
  }

  /**
   * Sets the value of the formType property.
   *
   * @param value allowed object is {@link String }
   */
  public void setFormType(String value) {
    this.formType = value;
  }

  /**
   * Gets the value of the collectionExerciseId property.
   *
   * @return possible object is {@link String }
   */
  public String getCollectionExerciseId() {
    return collectionExerciseId;
  }

  /**
   * Sets the value of the collectionExerciseId property.
   *
   * @param value allowed object is {@link String }
   */
  public void setCollectionExerciseId(String value) {
    this.collectionExerciseId = value;
  }

  /**
   * Gets the value of the sampleAttributes property.
   *
   * @return possible object is {@link SampleUnit.SampleAttributes }
   */
  public SampleUnit.SampleAttributes getSampleAttributes() {
    return sampleAttributes;
  }

  /**
   * Sets the value of the sampleAttributes property.
   *
   * @param value allowed object is {@link SampleUnit.SampleAttributes }
   */
  public void setSampleAttributes(SampleUnit.SampleAttributes value) {
    this.sampleAttributes = value;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method
   * and should not be called directly by client code.
   *
   * @param other A builder instance to which the state of this object will be copied.
   */
  public <B> void copyTo(final SampleUnit.Builder<B> other) {
    other.id = this.id;
    other.sampleUnitRef = this.sampleUnitRef;
    other.sampleUnitType = this.sampleUnitType;
    other.formType = this.formType;
    other.collectionExerciseId = this.collectionExerciseId;
    other.sampleAttributes =
        ((this.sampleAttributes == null) ? null : this.sampleAttributes.newCopyBuilder(other));
  }

  public <B> SampleUnit.Builder<B> newCopyBuilder(final B parentBuilder) {
    return new SampleUnit.Builder<B>(parentBuilder, this, true);
  }

  public SampleUnit.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  /**
   * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method
   * and should not be called directly by client code.
   *
   * @param other A builder instance to which the state of this object will be copied.
   */
  public <B> void copyTo(
      final SampleUnit.Builder<B> other,
      final PropertyTree propertyTree,
      final PropertyTreeUse propertyTreeUse) {
    final PropertyTree idPropertyTree = ((propertyTree == null) ? null : propertyTree.get("id"));
    if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
        ? (idPropertyTree != null)
        : ((idPropertyTree == null) || (!idPropertyTree.isLeaf())))) {
      other.id = this.id;
    }
    final PropertyTree sampleUnitRefPropertyTree =
        ((propertyTree == null) ? null : propertyTree.get("sampleUnitRef"));
    if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
        ? (sampleUnitRefPropertyTree != null)
        : ((sampleUnitRefPropertyTree == null) || (!sampleUnitRefPropertyTree.isLeaf())))) {
      other.sampleUnitRef = this.sampleUnitRef;
    }
    final PropertyTree sampleUnitTypePropertyTree =
        ((propertyTree == null) ? null : propertyTree.get("sampleUnitType"));
    if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
        ? (sampleUnitTypePropertyTree != null)
        : ((sampleUnitTypePropertyTree == null) || (!sampleUnitTypePropertyTree.isLeaf())))) {
      other.sampleUnitType = this.sampleUnitType;
    }
    final PropertyTree formTypePropertyTree =
        ((propertyTree == null) ? null : propertyTree.get("formType"));
    if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
        ? (formTypePropertyTree != null)
        : ((formTypePropertyTree == null) || (!formTypePropertyTree.isLeaf())))) {
      other.formType = this.formType;
    }
    final PropertyTree collectionExerciseIdPropertyTree =
        ((propertyTree == null) ? null : propertyTree.get("collectionExerciseId"));
    if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
        ? (collectionExerciseIdPropertyTree != null)
        : ((collectionExerciseIdPropertyTree == null)
            || (!collectionExerciseIdPropertyTree.isLeaf())))) {
      other.collectionExerciseId = this.collectionExerciseId;
    }
    final PropertyTree sampleAttributesPropertyTree =
        ((propertyTree == null) ? null : propertyTree.get("sampleAttributes"));
    if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
        ? (sampleAttributesPropertyTree != null)
        : ((sampleAttributesPropertyTree == null) || (!sampleAttributesPropertyTree.isLeaf())))) {
      other.sampleAttributes =
          ((this.sampleAttributes == null)
              ? null
              : this.sampleAttributes.newCopyBuilder(
                  other, sampleAttributesPropertyTree, propertyTreeUse));
    }
  }

  public <B> SampleUnit.Builder<B> newCopyBuilder(
      final B parentBuilder,
      final PropertyTree propertyTree,
      final PropertyTreeUse propertyTreeUse) {
    return new SampleUnit.Builder<B>(parentBuilder, this, true, propertyTree, propertyTreeUse);
  }

  public SampleUnit.Builder<Void> newCopyBuilder(
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return newCopyBuilder(null, propertyTree, propertyTreeUse);
  }

  public boolean equals(Object object) {
    if ((object == null) || (this.getClass() != object.getClass())) {
      return false;
    }
    if (this == object) {
      return true;
    }
    final SampleUnit that = ((SampleUnit) object);
    {
      String leftId;
      leftId = this.getId();
      String rightId;
      rightId = that.getId();
      if (this.id != null) {
        if (that.id != null) {
          if (!leftId.equals(rightId)) {
            return false;
          }
        } else {
          return false;
        }
      } else {
        if (that.id != null) {
          return false;
        }
      }
    }
    {
      String leftSampleUnitRef;
      leftSampleUnitRef = this.getSampleUnitRef();
      String rightSampleUnitRef;
      rightSampleUnitRef = that.getSampleUnitRef();
      if (this.sampleUnitRef != null) {
        if (that.sampleUnitRef != null) {
          if (!leftSampleUnitRef.equals(rightSampleUnitRef)) {
            return false;
          }
        } else {
          return false;
        }
      } else {
        if (that.sampleUnitRef != null) {
          return false;
        }
      }
    }
    {
      String leftSampleUnitType;
      leftSampleUnitType = this.getSampleUnitType();
      String rightSampleUnitType;
      rightSampleUnitType = that.getSampleUnitType();
      if (this.sampleUnitType != null) {
        if (that.sampleUnitType != null) {
          if (!leftSampleUnitType.equals(rightSampleUnitType)) {
            return false;
          }
        } else {
          return false;
        }
      } else {
        if (that.sampleUnitType != null) {
          return false;
        }
      }
    }
    {
      String leftFormType;
      leftFormType = this.getFormType();
      String rightFormType;
      rightFormType = that.getFormType();
      if (this.formType != null) {
        if (that.formType != null) {
          if (!leftFormType.equals(rightFormType)) {
            return false;
          }
        } else {
          return false;
        }
      } else {
        if (that.formType != null) {
          return false;
        }
      }
    }
    {
      String leftCollectionExerciseId;
      leftCollectionExerciseId = this.getCollectionExerciseId();
      String rightCollectionExerciseId;
      rightCollectionExerciseId = that.getCollectionExerciseId();
      if (this.collectionExerciseId != null) {
        if (that.collectionExerciseId != null) {
          if (!leftCollectionExerciseId.equals(rightCollectionExerciseId)) {
            return false;
          }
        } else {
          return false;
        }
      } else {
        if (that.collectionExerciseId != null) {
          return false;
        }
      }
    }
    {
      SampleUnit.SampleAttributes leftSampleAttributes;
      leftSampleAttributes = this.getSampleAttributes();
      SampleUnit.SampleAttributes rightSampleAttributes;
      rightSampleAttributes = that.getSampleAttributes();
      if (this.sampleAttributes != null) {
        if (that.sampleAttributes != null) {
          return leftSampleAttributes.equals(rightSampleAttributes);
        } else {
          return false;
        }
      } else {
        return that.sampleAttributes == null;
      }
    }
  }

  public int hashCode() {
    int currentHashCode = 1;
    {
      currentHashCode = (currentHashCode * 31);
      String theId;
      theId = this.getId();
      if (this.id != null) {
        currentHashCode += theId.hashCode();
      }
    }
    {
      currentHashCode = (currentHashCode * 31);
      String theSampleUnitRef;
      theSampleUnitRef = this.getSampleUnitRef();
      if (this.sampleUnitRef != null) {
        currentHashCode += theSampleUnitRef.hashCode();
      }
    }
    {
      currentHashCode = (currentHashCode * 31);
      String theSampleUnitType;
      theSampleUnitType = this.getSampleUnitType();
      if (this.sampleUnitType != null) {
        currentHashCode += theSampleUnitType.hashCode();
      }
    }
    {
      currentHashCode = (currentHashCode * 31);
      String theFormType;
      theFormType = this.getFormType();
      if (this.formType != null) {
        currentHashCode += theFormType.hashCode();
      }
    }
    {
      currentHashCode = (currentHashCode * 31);
      String theCollectionExerciseId;
      theCollectionExerciseId = this.getCollectionExerciseId();
      if (this.collectionExerciseId != null) {
        currentHashCode += theCollectionExerciseId.hashCode();
      }
    }
    {
      currentHashCode = (currentHashCode * 31);
      SampleUnit.SampleAttributes theSampleAttributes;
      theSampleAttributes = this.getSampleAttributes();
      if (this.sampleAttributes != null) {
        currentHashCode += theSampleAttributes.hashCode();
      }
    }
    return currentHashCode;
  }

  public static class Builder<B> implements Buildable {

    protected final B parentBuilder;
    protected final SampleUnit storedValue;
    private String id;
    private String sampleUnitRef;
    private String sampleUnitType;
    private String formType;
    private String collectionExerciseId;
    private SampleUnit.SampleAttributes.Builder<SampleUnit.Builder<B>> sampleAttributes;

    public Builder(final B parentBuilder, final SampleUnit other, final boolean copy) {
      this.parentBuilder = parentBuilder;
      if (other != null) {
        if (copy) {
          storedValue = null;
          this.id = other.id;
          this.sampleUnitRef = other.sampleUnitRef;
          this.sampleUnitType = other.sampleUnitType;
          this.formType = other.formType;
          this.collectionExerciseId = other.collectionExerciseId;
          this.sampleAttributes =
              ((other.sampleAttributes == null)
                  ? null
                  : other.sampleAttributes.newCopyBuilder(this));
        } else {
          storedValue = other;
        }
      } else {
        storedValue = null;
      }
    }

    public Builder(
        final B parentBuilder,
        final SampleUnit other,
        final boolean copy,
        final PropertyTree propertyTree,
        final PropertyTreeUse propertyTreeUse) {
      this.parentBuilder = parentBuilder;
      if (other != null) {
        if (copy) {
          storedValue = null;
          final PropertyTree idPropertyTree =
              ((propertyTree == null) ? null : propertyTree.get("id"));
          if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (idPropertyTree != null)
              : ((idPropertyTree == null) || (!idPropertyTree.isLeaf())))) {
            this.id = other.id;
          }
          final PropertyTree sampleUnitRefPropertyTree =
              ((propertyTree == null) ? null : propertyTree.get("sampleUnitRef"));
          if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (sampleUnitRefPropertyTree != null)
              : ((sampleUnitRefPropertyTree == null) || (!sampleUnitRefPropertyTree.isLeaf())))) {
            this.sampleUnitRef = other.sampleUnitRef;
          }
          final PropertyTree sampleUnitTypePropertyTree =
              ((propertyTree == null) ? null : propertyTree.get("sampleUnitType"));
          if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (sampleUnitTypePropertyTree != null)
              : ((sampleUnitTypePropertyTree == null) || (!sampleUnitTypePropertyTree.isLeaf())))) {
            this.sampleUnitType = other.sampleUnitType;
          }
          final PropertyTree formTypePropertyTree =
              ((propertyTree == null) ? null : propertyTree.get("formType"));
          if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (formTypePropertyTree != null)
              : ((formTypePropertyTree == null) || (!formTypePropertyTree.isLeaf())))) {
            this.formType = other.formType;
          }
          final PropertyTree collectionExerciseIdPropertyTree =
              ((propertyTree == null) ? null : propertyTree.get("collectionExerciseId"));
          if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (collectionExerciseIdPropertyTree != null)
              : ((collectionExerciseIdPropertyTree == null)
                  || (!collectionExerciseIdPropertyTree.isLeaf())))) {
            this.collectionExerciseId = other.collectionExerciseId;
          }
          final PropertyTree sampleAttributesPropertyTree =
              ((propertyTree == null) ? null : propertyTree.get("sampleAttributes"));
          if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (sampleAttributesPropertyTree != null)
              : ((sampleAttributesPropertyTree == null)
                  || (!sampleAttributesPropertyTree.isLeaf())))) {
            this.sampleAttributes =
                ((other.sampleAttributes == null)
                    ? null
                    : other.sampleAttributes.newCopyBuilder(
                        this, sampleAttributesPropertyTree, propertyTreeUse));
          }
        } else {
          storedValue = other;
        }
      } else {
        storedValue = null;
      }
    }

    public B end() {
      return this.parentBuilder;
    }

    protected <P extends SampleUnit> P init(final P product) {
      product.id = this.id;
      product.sampleUnitRef = this.sampleUnitRef;
      product.sampleUnitType = this.sampleUnitType;
      product.formType = this.formType;
      product.collectionExerciseId = this.collectionExerciseId;
      product.sampleAttributes =
          ((this.sampleAttributes == null) ? null : this.sampleAttributes.build());
      return product;
    }

    /**
     * Sets the new value of "id" (any previous value will be replaced)
     *
     * @param id New value of the "id" property.
     */
    public SampleUnit.Builder<B> withId(final String id) {
      this.id = id;
      return this;
    }

    /**
     * Sets the new value of "sampleUnitRef" (any previous value will be replaced)
     *
     * @param sampleUnitRef New value of the "sampleUnitRef" property.
     */
    public SampleUnit.Builder<B> withSampleUnitRef(final String sampleUnitRef) {
      this.sampleUnitRef = sampleUnitRef;
      return this;
    }

    /**
     * Sets the new value of "sampleUnitType" (any previous value will be replaced)
     *
     * @param sampleUnitType New value of the "sampleUnitType" property.
     */
    public SampleUnit.Builder<B> withSampleUnitType(final String sampleUnitType) {
      this.sampleUnitType = sampleUnitType;
      return this;
    }

    /**
     * Sets the new value of "formType" (any previous value will be replaced)
     *
     * @param formType New value of the "formType" property.
     */
    public SampleUnit.Builder<B> withFormType(final String formType) {
      this.formType = formType;
      return this;
    }

    /**
     * Sets the new value of "collectionExerciseId" (any previous value will be replaced)
     *
     * @param collectionExerciseId New value of the "collectionExerciseId" property.
     */
    public SampleUnit.Builder<B> withCollectionExerciseId(final String collectionExerciseId) {
      this.collectionExerciseId = collectionExerciseId;
      return this;
    }

    /**
     * Sets the new value of "sampleAttributes" (any previous value will be replaced)
     *
     * @param sampleAttributes New value of the "sampleAttributes" property.
     */
    public SampleUnit.Builder<B> withSampleAttributes(
        final SampleUnit.SampleAttributes sampleAttributes) {
      this.sampleAttributes =
          ((sampleAttributes == null)
              ? null
              : new SampleUnit.SampleAttributes.Builder<SampleUnit.Builder<B>>(
                  this, sampleAttributes, false));
      return this;
    }

    /**
     * Returns a new builder to build the value of the "sampleAttributes" property (replacing
     * previous value). Use {@link SampleUnit.SampleAttributes.Builder#end()} to return to the
     * current builder.
     *
     * @return A new builder to build the value of the "sampleAttributes" property. Use {@link
     *     SampleUnit.SampleAttributes.Builder#end()} to return to the current builder.
     */
    public SampleUnit.SampleAttributes.Builder<? extends SampleUnit.Builder<B>>
        withSampleAttributes() {
      return this.sampleAttributes =
          new SampleUnit.SampleAttributes.Builder<SampleUnit.Builder<B>>(this, null, false);
    }

    @Override
    public SampleUnit build() {
      if (storedValue == null) {
        return this.init(new SampleUnit());
      } else {
        return storedValue;
      }
    }
  }

  /**
   * Java class for anonymous complex type.
   *
   * <p>The following schema fragment specifies the expected content contained within this class.
   *
   * <pre>
   * &lt;complexType&gt;
   *   &lt;complexContent&gt;
   *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
   *       &lt;sequence&gt;
   *         &lt;element name="entry" maxOccurs="unbounded" minOccurs="0"&gt;
   *           &lt;complexType&gt;
   *             &lt;complexContent&gt;
   *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
   *                 &lt;sequence&gt;
   *                   &lt;element name="key" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
   *                   &lt;element name="value" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
   *                 &lt;/sequence&gt;
   *               &lt;/restriction&gt;
   *             &lt;/complexContent&gt;
   *           &lt;/complexType&gt;
   *         &lt;/element&gt;
   *       &lt;/sequence&gt;
   *     &lt;/restriction&gt;
   *   &lt;/complexContent&gt;
   * &lt;/complexType&gt;
   * </pre>
   */
  @XmlAccessorType(XmlAccessType.FIELD)
  @XmlType(
      name = "",
      propOrder = {"entries"})
  public static class SampleAttributes {

    @XmlElement(name = "entry")
    protected List<SampleUnit.SampleAttributes.Entry> entries;

    /** Default no-arg constructor */
    public SampleAttributes() {
      super();
    }

    /** Fully-initialising value constructor */
    public SampleAttributes(final List<Entry> entries) {
      this.entries = entries;
    }

    public static SampleUnit.SampleAttributes.Builder<Void> builder() {
      return new SampleUnit.SampleAttributes.Builder<Void>(null, null, false);
    }

    public static <B> SampleUnit.SampleAttributes.Builder<B> copyOf(
        final SampleUnit.SampleAttributes other) {
      final SampleUnit.SampleAttributes.Builder<B> newBuilder =
          new SampleUnit.SampleAttributes.Builder<B>(null, null, false);
      other.copyTo(newBuilder);
      return newBuilder;
    }

    public static <B> SampleUnit.SampleAttributes.Builder<B> copyOf(
        final SampleUnit.SampleAttributes other,
        final PropertyTree propertyTree,
        final PropertyTreeUse propertyTreeUse) {
      final SampleUnit.SampleAttributes.Builder<B> newBuilder =
          new SampleUnit.SampleAttributes.Builder<B>(null, null, false);
      other.copyTo(newBuilder, propertyTree, propertyTreeUse);
      return newBuilder;
    }

    public static SampleUnit.SampleAttributes.Builder<Void> copyExcept(
        final SampleUnit.SampleAttributes other, final PropertyTree propertyTree) {
      return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static SampleUnit.SampleAttributes.Builder<Void> copyOnly(
        final SampleUnit.SampleAttributes other, final PropertyTree propertyTree) {
      return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Gets the value of the entries property.
     *
     * <p>This accessor method returns a reference to the live list, not a snapshot. Therefore any
     * modification you make to the returned list will be present inside the JAXB object. This is
     * why there is not a <CODE>set</CODE> method for the entries property.
     *
     * <p>For example, to add a new item, do as follows:
     *
     * <pre>
     *    getEntries().add(newItem);
     * </pre>
     *
     * <p>Objects of the following type(s) are allowed in the list {@link
     * SampleUnit.SampleAttributes.Entry }
     */
    public List<SampleUnit.SampleAttributes.Entry> getEntries() {
      if (entries == null) {
        entries = new ArrayList<SampleUnit.SampleAttributes.Entry>();
      }
      return this.entries;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf}
     * method and should not be called directly by client code.
     *
     * @param other A builder instance to which the state of this object will be copied.
     */
    public <B> void copyTo(final SampleUnit.SampleAttributes.Builder<B> other) {
      if (this.entries == null) {
        other.entries = null;
      } else {
        other.entries = new ArrayList<Entry.Builder<Builder<B>>>();
        for (SampleUnit.SampleAttributes.Entry item : this.entries) {
          other.entries.add(((item == null) ? null : item.newCopyBuilder(other)));
        }
      }
    }

    public <B> SampleUnit.SampleAttributes.Builder<B> newCopyBuilder(final B parentBuilder) {
      return new SampleUnit.SampleAttributes.Builder<B>(parentBuilder, this, true);
    }

    public SampleUnit.SampleAttributes.Builder<Void> newCopyBuilder() {
      return newCopyBuilder(null);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf}
     * method and should not be called directly by client code.
     *
     * @param other A builder instance to which the state of this object will be copied.
     */
    public <B> void copyTo(
        final SampleUnit.SampleAttributes.Builder<B> other,
        final PropertyTree propertyTree,
        final PropertyTreeUse propertyTreeUse) {
      final PropertyTree entriesPropertyTree =
          ((propertyTree == null) ? null : propertyTree.get("entries"));
      if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (entriesPropertyTree != null)
          : ((entriesPropertyTree == null) || (!entriesPropertyTree.isLeaf())))) {
        if (this.entries == null) {
          other.entries = null;
        } else {
          other.entries =
              new ArrayList<
                  SampleUnit.SampleAttributes.Entry.Builder<
                      SampleUnit.SampleAttributes.Builder<B>>>();
          for (SampleUnit.SampleAttributes.Entry item : this.entries) {
            other.entries.add(
                ((item == null)
                    ? null
                    : item.newCopyBuilder(other, entriesPropertyTree, propertyTreeUse)));
          }
        }
      }
    }

    public <B> SampleUnit.SampleAttributes.Builder<B> newCopyBuilder(
        final B parentBuilder,
        final PropertyTree propertyTree,
        final PropertyTreeUse propertyTreeUse) {
      return new SampleUnit.SampleAttributes.Builder<B>(
          parentBuilder, this, true, propertyTree, propertyTreeUse);
    }

    public SampleUnit.SampleAttributes.Builder<Void> newCopyBuilder(
        final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
      return newCopyBuilder(null, propertyTree, propertyTreeUse);
    }

    public boolean equals(Object object) {
      if ((object == null) || (this.getClass() != object.getClass())) {
        return false;
      }
      if (this == object) {
        return true;
      }
      final SampleUnit.SampleAttributes that = ((SampleUnit.SampleAttributes) object);
      {
        List<SampleUnit.SampleAttributes.Entry> leftEntries;
        leftEntries =
            (((this.entries != null) && (!this.entries.isEmpty())) ? this.getEntries() : null);
        List<SampleUnit.SampleAttributes.Entry> rightEntries;
        rightEntries =
            (((that.entries != null) && (!that.entries.isEmpty())) ? that.getEntries() : null);
        if ((this.entries != null) && (!this.entries.isEmpty())) {
          if ((that.entries != null) && (!that.entries.isEmpty())) {
            return leftEntries.equals(rightEntries);
          } else {
            return false;
          }
        } else {
          return (that.entries == null) || (that.entries.isEmpty());
        }
      }
    }

    public int hashCode() {
      int currentHashCode = 1;
      {
        currentHashCode = (currentHashCode * 31);
        List<SampleUnit.SampleAttributes.Entry> theEntries;
        theEntries =
            (((this.entries != null) && (!this.entries.isEmpty())) ? this.getEntries() : null);
        if ((this.entries != null) && (!this.entries.isEmpty())) {
          currentHashCode += theEntries.hashCode();
        }
      }
      return currentHashCode;
    }

    public static class Builder<B> implements Buildable {

      protected final B parentBuilder;
      protected final SampleUnit.SampleAttributes storedValue;
      private List<
              SampleUnit.SampleAttributes.Entry.Builder<SampleUnit.SampleAttributes.Builder<B>>>
          entries;

      public Builder(
          final B parentBuilder, final SampleUnit.SampleAttributes other, final boolean copy) {
        this.parentBuilder = parentBuilder;
        if (other != null) {
          if (copy) {
            storedValue = null;
            if (other.entries == null) {
              this.entries = null;
            } else {
              this.entries =
                  new ArrayList<
                      SampleUnit.SampleAttributes.Entry.Builder<
                          SampleUnit.SampleAttributes.Builder<B>>>();
              for (SampleUnit.SampleAttributes.Entry item : other.entries) {
                this.entries.add(((item == null) ? null : item.newCopyBuilder(this)));
              }
            }
          } else {
            storedValue = other;
          }
        } else {
          storedValue = null;
        }
      }

      public Builder(
          final B parentBuilder,
          final SampleUnit.SampleAttributes other,
          final boolean copy,
          final PropertyTree propertyTree,
          final PropertyTreeUse propertyTreeUse) {
        this.parentBuilder = parentBuilder;
        if (other != null) {
          if (copy) {
            storedValue = null;
            final PropertyTree entriesPropertyTree =
                ((propertyTree == null) ? null : propertyTree.get("entries"));
            if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (entriesPropertyTree != null)
                : ((entriesPropertyTree == null) || (!entriesPropertyTree.isLeaf())))) {
              if (other.entries == null) {
                this.entries = null;
              } else {
                this.entries =
                    new ArrayList<
                        SampleUnit.SampleAttributes.Entry.Builder<
                            SampleUnit.SampleAttributes.Builder<B>>>();
                for (SampleUnit.SampleAttributes.Entry item : other.entries) {
                  this.entries.add(
                      ((item == null)
                          ? null
                          : item.newCopyBuilder(this, entriesPropertyTree, propertyTreeUse)));
                }
              }
            }
          } else {
            storedValue = other;
          }
        } else {
          storedValue = null;
        }
      }

      public B end() {
        return this.parentBuilder;
      }

      protected <P extends SampleUnit.SampleAttributes> P init(final P product) {
        if (this.entries != null) {
          final List<SampleUnit.SampleAttributes.Entry> entries =
              new ArrayList<SampleUnit.SampleAttributes.Entry>(this.entries.size());
          for (SampleUnit.SampleAttributes.Entry.Builder<SampleUnit.SampleAttributes.Builder<B>>
              item : this.entries) {
            entries.add(item.build());
          }
          product.entries = entries;
        }
        return product;
      }

      /**
       * Adds the given items to the value of "entries"
       *
       * @param entries Items to add to the value of the "entries" property
       */
      public SampleUnit.SampleAttributes.Builder<B> addEntries(
          final Iterable<? extends SampleUnit.SampleAttributes.Entry> entries) {
        if (entries != null) {
          if (this.entries == null) {
            this.entries =
                new ArrayList<
                    SampleUnit.SampleAttributes.Entry.Builder<
                        SampleUnit.SampleAttributes.Builder<B>>>();
          }
          for (SampleUnit.SampleAttributes.Entry item : entries) {
            this.entries.add(
                new SampleUnit.SampleAttributes.Entry.Builder<
                    SampleUnit.SampleAttributes.Builder<B>>(this, item, false));
          }
        }
        return this;
      }

      /**
       * Sets the new value of "entries" (any previous value will be replaced)
       *
       * @param entries New value of the "entries" property.
       */
      public SampleUnit.SampleAttributes.Builder<B> withEntries(
          final Iterable<? extends SampleUnit.SampleAttributes.Entry> entries) {
        if (this.entries != null) {
          this.entries.clear();
        }
        return addEntries(entries);
      }

      /**
       * Adds the given items to the value of "entries"
       *
       * @param entries Items to add to the value of the "entries" property
       */
      public SampleUnit.SampleAttributes.Builder<B> addEntries(
          SampleUnit.SampleAttributes.Entry... entries) {
        addEntries(Arrays.asList(entries));
        return this;
      }

      /**
       * Sets the new value of "entries" (any previous value will be replaced)
       *
       * @param entries New value of the "entries" property.
       */
      public SampleUnit.SampleAttributes.Builder<B> withEntries(
          SampleUnit.SampleAttributes.Entry... entries) {
        withEntries(Arrays.asList(entries));
        return this;
      }

      /**
       * Returns a new builder to build an additional value of the "Entries" property. Use {@link
       * SampleUnit.SampleAttributes.Entry.Builder #end()} to return to the current builder.
       *
       * @return a new builder to build an additional value of the "Entries" property. Use {@link
       *     SampleUnit.SampleAttributes.Entry.Builder #end()} to return to the current builder.
       */
      public SampleUnit.SampleAttributes.Entry.Builder<
              ? extends SampleUnit.SampleAttributes.Builder<B>>
          addEntries() {
        if (this.entries == null) {
          this.entries =
              new ArrayList<
                  SampleUnit.SampleAttributes.Entry.Builder<
                      SampleUnit.SampleAttributes.Builder<B>>>();
        }
        final SampleUnit.SampleAttributes.Entry.Builder<SampleUnit.SampleAttributes.Builder<B>>
            entriesBuilder =
                new SampleUnit.SampleAttributes.Entry.Builder<
                    SampleUnit.SampleAttributes.Builder<B>>(this, null, false);
        this.entries.add(entriesBuilder);
        return entriesBuilder;
      }

      @Override
      public SampleUnit.SampleAttributes build() {
        if (storedValue == null) {
          return this.init(new SampleUnit.SampleAttributes());
        } else {
          return storedValue;
        }
      }
    }

    /**
     * Java class for anonymous complex type.
     *
     * <p>The following schema fragment specifies the expected content contained within this class.
     *
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="key" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
     *         &lt;element name="value" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(
        name = "",
        propOrder = {"key", "value"})
    public static class Entry {

      protected String key;
      protected String value;

      /** Default no-arg constructor */
      public Entry() {
        super();
      }

      /** Fully-initialising value constructor */
      public Entry(final String key, final String value) {
        this.key = key;
        this.value = value;
      }

      public static SampleUnit.SampleAttributes.Entry.Builder<Void> builder() {
        return new SampleUnit.SampleAttributes.Entry.Builder<Void>(null, null, false);
      }

      public static <B> SampleUnit.SampleAttributes.Entry.Builder<B> copyOf(
          final SampleUnit.SampleAttributes.Entry other) {
        final SampleUnit.SampleAttributes.Entry.Builder<B> newBuilder =
            new SampleUnit.SampleAttributes.Entry.Builder<B>(null, null, false);
        other.copyTo(newBuilder);
        return newBuilder;
      }

      public static <B> SampleUnit.SampleAttributes.Entry.Builder<B> copyOf(
          final SampleUnit.SampleAttributes.Entry other,
          final PropertyTree propertyTree,
          final PropertyTreeUse propertyTreeUse) {
        final SampleUnit.SampleAttributes.Entry.Builder<B> newBuilder =
            new SampleUnit.SampleAttributes.Entry.Builder<B>(null, null, false);
        other.copyTo(newBuilder, propertyTree, propertyTreeUse);
        return newBuilder;
      }

      public static SampleUnit.SampleAttributes.Entry.Builder<Void> copyExcept(
          final SampleUnit.SampleAttributes.Entry other, final PropertyTree propertyTree) {
        return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
      }

      public static SampleUnit.SampleAttributes.Entry.Builder<Void> copyOnly(
          final SampleUnit.SampleAttributes.Entry other, final PropertyTree propertyTree) {
        return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
      }

      /**
       * Gets the value of the key property.
       *
       * @return possible object is {@link String }
       */
      public String getKey() {
        return key;
      }

      /**
       * Sets the value of the key property.
       *
       * @param value allowed object is {@link String }
       */
      public void setKey(String value) {
        this.key = value;
      }

      /**
       * Gets the value of the value property.
       *
       * @return possible object is {@link String }
       */
      public String getValue() {
        return value;
      }

      /**
       * Sets the value of the value property.
       *
       * @param value allowed object is {@link String }
       */
      public void setValue(String value) {
        this.value = value;
      }

      /**
       * Copies all state of this object to a builder. This method is used by the {@link #copyOf}
       * method and should not be called directly by client code.
       *
       * @param other A builder instance to which the state of this object will be copied.
       */
      public <B> void copyTo(final SampleUnit.SampleAttributes.Entry.Builder<B> other) {
        other.key = this.key;
        other.value = this.value;
      }

      public <B> SampleUnit.SampleAttributes.Entry.Builder<B> newCopyBuilder(
          final B parentBuilder) {
        return new SampleUnit.SampleAttributes.Entry.Builder<B>(parentBuilder, this, true);
      }

      public SampleUnit.SampleAttributes.Entry.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
      }

      /**
       * Copies all state of this object to a builder. This method is used by the {@link #copyOf}
       * method and should not be called directly by client code.
       *
       * @param other A builder instance to which the state of this object will be copied.
       */
      public <B> void copyTo(
          final SampleUnit.SampleAttributes.Entry.Builder<B> other,
          final PropertyTree propertyTree,
          final PropertyTreeUse propertyTreeUse) {
        final PropertyTree keyPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("key"));
        if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
            ? (keyPropertyTree != null)
            : ((keyPropertyTree == null) || (!keyPropertyTree.isLeaf())))) {
          other.key = this.key;
        }
        final PropertyTree valuePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("value"));
        if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
            ? (valuePropertyTree != null)
            : ((valuePropertyTree == null) || (!valuePropertyTree.isLeaf())))) {
          other.value = this.value;
        }
      }

      public <B> SampleUnit.SampleAttributes.Entry.Builder<B> newCopyBuilder(
          final B parentBuilder,
          final PropertyTree propertyTree,
          final PropertyTreeUse propertyTreeUse) {
        return new SampleUnit.SampleAttributes.Entry.Builder<B>(
            parentBuilder, this, true, propertyTree, propertyTreeUse);
      }

      public SampleUnit.SampleAttributes.Entry.Builder<Void> newCopyBuilder(
          final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
        return newCopyBuilder(null, propertyTree, propertyTreeUse);
      }

      public boolean equals(Object object) {
        if ((object == null) || (this.getClass() != object.getClass())) {
          return false;
        }
        if (this == object) {
          return true;
        }
        final SampleUnit.SampleAttributes.Entry that = ((SampleUnit.SampleAttributes.Entry) object);
        {
          String leftKey;
          leftKey = this.getKey();
          String rightKey;
          rightKey = that.getKey();
          if (this.key != null) {
            if (that.key != null) {
              if (!leftKey.equals(rightKey)) {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (that.key != null) {
              return false;
            }
          }
        }
        {
          String leftValue;
          leftValue = this.getValue();
          String rightValue;
          rightValue = that.getValue();
          if (this.value != null) {
            if (that.value != null) {
              return leftValue.equals(rightValue);
            } else {
              return false;
            }
          } else {
            return that.value == null;
          }
        }
      }

      public int hashCode() {
        int currentHashCode = 1;
        {
          currentHashCode = (currentHashCode * 31);
          String theKey;
          theKey = this.getKey();
          if (this.key != null) {
            currentHashCode += theKey.hashCode();
          }
        }
        {
          currentHashCode = (currentHashCode * 31);
          String theValue;
          theValue = this.getValue();
          if (this.value != null) {
            currentHashCode += theValue.hashCode();
          }
        }
        return currentHashCode;
      }

      public static class Builder<B> implements Buildable {

        protected final B parentBuilder;
        protected final SampleUnit.SampleAttributes.Entry storedValue;
        private String key;
        private String value;

        public Builder(
            final B parentBuilder,
            final SampleUnit.SampleAttributes.Entry other,
            final boolean copy) {
          this.parentBuilder = parentBuilder;
          if (other != null) {
            if (copy) {
              storedValue = null;
              this.key = other.key;
              this.value = other.value;
            } else {
              storedValue = other;
            }
          } else {
            storedValue = null;
          }
        }

        public Builder(
            final B parentBuilder,
            final SampleUnit.SampleAttributes.Entry other,
            final boolean copy,
            final PropertyTree propertyTree,
            final PropertyTreeUse propertyTreeUse) {
          this.parentBuilder = parentBuilder;
          if (other != null) {
            if (copy) {
              storedValue = null;
              final PropertyTree keyPropertyTree =
                  ((propertyTree == null) ? null : propertyTree.get("key"));
              if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
                  ? (keyPropertyTree != null)
                  : ((keyPropertyTree == null) || (!keyPropertyTree.isLeaf())))) {
                this.key = other.key;
              }
              final PropertyTree valuePropertyTree =
                  ((propertyTree == null) ? null : propertyTree.get("value"));
              if (((propertyTreeUse == PropertyTreeUse.INCLUDE)
                  ? (valuePropertyTree != null)
                  : ((valuePropertyTree == null) || (!valuePropertyTree.isLeaf())))) {
                this.value = other.value;
              }
            } else {
              storedValue = other;
            }
          } else {
            storedValue = null;
          }
        }

        public B end() {
          return this.parentBuilder;
        }

        protected <P extends SampleUnit.SampleAttributes.Entry> P init(final P product) {
          product.key = this.key;
          product.value = this.value;
          return product;
        }

        /**
         * Sets the new value of "key" (any previous value will be replaced)
         *
         * @param key New value of the "key" property.
         */
        public SampleUnit.SampleAttributes.Entry.Builder<B> withKey(final String key) {
          this.key = key;
          return this;
        }

        /**
         * Sets the new value of "value" (any previous value will be replaced)
         *
         * @param value New value of the "value" property.
         */
        public SampleUnit.SampleAttributes.Entry.Builder<B> withValue(final String value) {
          this.value = value;
          return this;
        }

        @Override
        public SampleUnit.SampleAttributes.Entry build() {
          if (storedValue == null) {
            return this.init(new SampleUnit.SampleAttributes.Entry());
          } else {
            return storedValue;
          }
        }
      }

      public static class Select
          extends SampleUnit.SampleAttributes.Entry.Selector<
              SampleUnit.SampleAttributes.Entry.Select, Void> {

        Select() {
          super(null, null, null);
        }

        public static SampleUnit.SampleAttributes.Entry.Select root() {
          return new SampleUnit.SampleAttributes.Entry.Select();
        }
      }

      public static class Selector<T extends com.kscs.util.jaxb.Selector<T, ?>, P>
          extends com.kscs.util.jaxb.Selector<T, P> {

        private com.kscs.util.jaxb.Selector<T, SampleUnit.SampleAttributes.Entry.Selector<T, P>>
            key = null;
        private com.kscs.util.jaxb.Selector<T, SampleUnit.SampleAttributes.Entry.Selector<T, P>>
            value = null;

        public Selector(final T root, final P parent, final String propertyName) {
          super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
          final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
          products.putAll(super.buildChildren());
          if (this.key != null) {
            products.put("key", this.key.init());
          }
          if (this.value != null) {
            products.put("value", this.value.init());
          }
          return products;
        }

        public com.kscs.util.jaxb.Selector<T, SampleUnit.SampleAttributes.Entry.Selector<T, P>>
            key() {
          return ((this.key == null)
              ? this.key =
                  new com.kscs.util.jaxb.Selector<
                      T, SampleUnit.SampleAttributes.Entry.Selector<T, P>>(this._root, this, "key")
              : this.key);
        }

        public com.kscs.util.jaxb.Selector<T, SampleUnit.SampleAttributes.Entry.Selector<T, P>>
            value() {
          return ((this.value == null)
              ? this.value =
                  new com.kscs.util.jaxb.Selector<
                      T, SampleUnit.SampleAttributes.Entry.Selector<T, P>>(
                      this._root, this, "value")
              : this.value);
        }
      }
    }

    public static class Select
        extends SampleUnit.SampleAttributes.Selector<SampleUnit.SampleAttributes.Select, Void> {

      Select() {
        super(null, null, null);
      }

      public static SampleUnit.SampleAttributes.Select root() {
        return new SampleUnit.SampleAttributes.Select();
      }
    }

    public static class Selector<T extends com.kscs.util.jaxb.Selector<T, ?>, P>
        extends com.kscs.util.jaxb.Selector<T, P> {

      private SampleUnit.SampleAttributes.Entry.Selector<
              T, SampleUnit.SampleAttributes.Selector<T, P>>
          entries = null;

      public Selector(final T root, final P parent, final String propertyName) {
        super(root, parent, propertyName);
      }

      @Override
      public Map<String, PropertyTree> buildChildren() {
        final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
        products.putAll(super.buildChildren());
        if (this.entries != null) {
          products.put("entries", this.entries.init());
        }
        return products;
      }

      public SampleUnit.SampleAttributes.Entry.Selector<
              T, SampleUnit.SampleAttributes.Selector<T, P>>
          entries() {
        return ((this.entries == null)
            ? this.entries =
                new SampleUnit.SampleAttributes.Entry.Selector<
                    T, SampleUnit.SampleAttributes.Selector<T, P>>(this._root, this, "entries")
            : this.entries);
      }
    }
  }

  public static class Select extends SampleUnit.Selector<SampleUnit.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static SampleUnit.Select root() {
      return new SampleUnit.Select();
    }
  }

  public static class Selector<T extends com.kscs.util.jaxb.Selector<T, ?>, P>
      extends com.kscs.util.jaxb.Selector<T, P> {

    private com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>> id = null;
    private com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>> sampleUnitRef = null;
    private com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>> sampleUnitType = null;
    private com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>> formType = null;
    private com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>> collectionExerciseId = null;
    private SampleUnit.SampleAttributes.Selector<T, SampleUnit.Selector<T, P>> sampleAttributes =
        null;

    public Selector(final T root, final P parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.id != null) {
        products.put("id", this.id.init());
      }
      if (this.sampleUnitRef != null) {
        products.put("sampleUnitRef", this.sampleUnitRef.init());
      }
      if (this.sampleUnitType != null) {
        products.put("sampleUnitType", this.sampleUnitType.init());
      }
      if (this.formType != null) {
        products.put("formType", this.formType.init());
      }
      if (this.collectionExerciseId != null) {
        products.put("collectionExerciseId", this.collectionExerciseId.init());
      }
      if (this.sampleAttributes != null) {
        products.put("sampleAttributes", this.sampleAttributes.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>> id() {
      return ((this.id == null)
          ? this.id =
              new com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>>(this._root, this, "id")
          : this.id);
    }

    public com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>> sampleUnitRef() {
      return ((this.sampleUnitRef == null)
          ? this.sampleUnitRef =
              new com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>>(
                  this._root, this, "sampleUnitRef")
          : this.sampleUnitRef);
    }

    public com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>> sampleUnitType() {
      return ((this.sampleUnitType == null)
          ? this.sampleUnitType =
              new com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>>(
                  this._root, this, "sampleUnitType")
          : this.sampleUnitType);
    }

    public com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>> formType() {
      return ((this.formType == null)
          ? this.formType =
              new com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>>(
                  this._root, this, "formType")
          : this.formType);
    }

    public com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>> collectionExerciseId() {
      return ((this.collectionExerciseId == null)
          ? this.collectionExerciseId =
              new com.kscs.util.jaxb.Selector<T, SampleUnit.Selector<T, P>>(
                  this._root, this, "collectionExerciseId")
          : this.collectionExerciseId);
    }

    public SampleUnit.SampleAttributes.Selector<T, SampleUnit.Selector<T, P>> sampleAttributes() {
      return ((this.sampleAttributes == null)
          ? this.sampleAttributes =
              new SampleUnit.SampleAttributes.Selector<T, SampleUnit.Selector<T, P>>(
                  this._root, this, "sampleAttributes")
          : this.sampleAttributes);
    }
  }
}
