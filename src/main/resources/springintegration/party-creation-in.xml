<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
       xmlns:int-xml="http://www.springframework.org/schema/integration/xml"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
  http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
  http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
  http://www.springframework.org/schema/integration/xml http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd">


   <bean id="partyListenerContainer" class="org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer">
      <property name="connectionFactory" ref="connectionFactory" />
      <property name="queueNames" value="Sample.Party" />
      <property name="concurrentConsumers" value="${messaging.consumingThreads}" />
      <property name="prefetchCount" value="${messaging.prefetchCount}" />
      <property name="txSize" value="${messaging.txSize}" />
      <property name="channelTransacted" value="true" />
   </bean>

   <int:channel id="partyXml" />
   <bean id="simpleMessageConverter" class="org.springframework.amqp.support.converter.SimpleMessageConverter" />
   <int-amqp:inbound-channel-adapter id="partyPostingAMQP" listener-container="partyListenerContainer"
                                     message-converter="simpleMessageConverter" channel="partyXmlValid" />

   <!-- Xml validated against the inbound schema
   <int:channel id="PartyInvalidXml" />
   <int-amqp:outbound-channel-adapter id="invalidPartyAmqp" channel="PartyInvalidXml" exchange-name="sample-party-invalid-exchange" routing-key="Sample.LifecycleEvents.binding" />
    Option to be used in Debug/Test: throw-exception-on-rejection="true"
   <int-xml:validating-filter id="PartyValidator" input-channel="partyXml"
                              output-channel="partyXmlValid" schema-location="classpath:partysvc/xsd/party-service.xsd" throw-exception-on-rejection="true"/> discard-channel="PartyInvalidXml"-->

   <!-- The now validated xml is transformed into the jaxb generated object model -->
   <bean id="partyInMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
      <property name="contextPath" value="uk.gov.ons.ctp.response.party.definition" />
   </bean>
   <int:channel id="partyTransformed" datatype="uk.gov.ons.ctp.response.party.definition.PartyCreationRequestDTO" />
   <int-xml:unmarshalling-transformer
           input-channel="partyXmlValid" output-channel="partyTransformed"
           unmarshaller="partyInMarshaller" />

   <!-- Finally see the @ServiceActivator(inputChannel="caseNotificationTransformed") -->

   <!-- Start of section to deal with retries and DLQ after max attempts -->
   <int:channel id="partyDlqChannel" />

   <bean class="org.springframework.integration.handler.advice.RequestHandlerRetryAdvice" id="partyRetryAdvice">
      <property name="recoveryCallback">
         <bean class="org.springframework.integration.handler.advice.ErrorMessageSendingRecoverer">
            <constructor-arg ref="partyDlqChannel" />
         </bean>
      </property>
      <property name="retryStateGenerator"> <!-- Important to make it a Stateful Retry -->
         <bean class="org.springframework.integration.handler.advice.SpelExpressionRetryStateGenerator">
            <constructor-arg value="payload.sampleSummaryId + '|' + payload.sampleUnitRef"/>
         </bean>
      </property>
      <property name="retryTemplate" ref="retryTemplate" />
   </bean>
   <bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
      <property name="backOffPolicy">
         <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
            <property name="initialInterval" value="${messaging.backoffInitial}" />
            <property name="multiplier" value="${messaging.backoffMultiplier}" />
            <property name="maxInterval" value="${messaging.backoffMax}" />
         </bean>
      </property>
      <property name="retryPolicy">
         <bean class="uk.gov.ons.ctp.common.retry.CTPUnknownHostRetryPolicy">
            <constructor-arg type="int">
               <value>${messaging.maxAttempts}</value>
            </constructor-arg>
         </bean>
      </property>
   </bean>

   <int:channel id="partyDlqInterimChannel" />
   <int:transformer input-channel="partyDlqChannel" output-channel="partyDlqInterimChannel" expression="payload.failedMessage.payload" />

   <int:channel id="partyDlqChannelXml" />
   <int-xml:marshalling-transformer
           input-channel="partyDlqInterimChannel" output-channel="partyDlqChannelXml"
           marshaller="partyInMarshaller"
           result-transformer="partyOutboundTransformer"/>
   <bean id="partyOutboundTransformer" class="org.springframework.integration.xml.transformer.ResultToStringTransformer" />

   <int-amqp:outbound-channel-adapter id="partyDlqAmqp" channel="partyDlqChannelXml" exchange-name="sample-party-deadletter-exchange" routing-key="Sample.Party.binding" />
    <!--End of section to deal with retries and DLQ after max attempts -->
</beans>

